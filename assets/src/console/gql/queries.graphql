# import CreateServiceInput from "./schema.graphql"

fragment Service on Service {
  id
  name
  current_go_live_stage
}

fragment GatewayAccount on GatewayAccount {
  id
  type
  payment_provider
  credentials {
    ... on BamboraCredentials {
      account_number
      api_username
    }
  }
}

fragment Product on Product {
  id
  name
  name_slug
  service_name_slug
  description
}

fragment Payment on Payment {
  id
  inserted_at
  updated_at
  status
  amount
  reference
  description
  email
  gateway_transaction_id
  card_details {
    cardholder_name
    last_digits_card_number
    first_digits_card_number
    expiry_date
    card_brand
  }
}

query GetUserServices($userId: ID!) {
  services: userServices(userId: $userId)
    @rest(
      type: "Service"
      path: "/internal/services/users/{args.userId}/services"
    ) {
    ...Service
  }
}

query GetService($id: ID!) {
  service(id: $id)
    @rest(type: "Service", path: "/internal/services/services/{args.id}") {
    ...Service
  }
}

query GetServiceWithUsers($id: ID!) {
  service(id: $id)
    @rest(type: "Service", path: "/internal/services/services/{args.id}") {
    id @export(as: "id")
    ...Service
    users
      @rest(
        type: "[ServiceUser]"
        path: "/internal/services/services/{exportVariables.id}/service-users"
      ) {
      user {
        id
        name
        email
      }
      role {
        name
      }
    }
  }
}

query GetServiceWithGatewayAccounts($id: ID!) {
  service(id: $id)
    @rest(type: "Service", path: "/internal/services/services/{args.id}") {
    id @export(as: "id")
    ...Service
    gateway_accounts
      @rest(
        type: "[GatewayAccount]"
        path: "/internal/services/services/{exportVariables.id}/gateway-accounts"
      ) {
      ...GatewayAccount
    }
  }
}

mutation CreateService($input: CreateServiceInput!) {
  service: createService(input: $input)
    @rest(
      type: "Service"
      path: "/internal/services/services"
      method: "POST"
    ) {
    ...Service
  }
}

mutation UpdateService($id: ID!, $input: UpdateServiceInput!) {
  service: updateService(id: $id, input: $input)
    @rest(
      type: "Service"
      path: "/internal/services/services/{args.id}"
      method: "PUT"
    ) {
    ...Service
  }
}

query GetGatewayAccounts($serviceId: ID!) {
  gatewayAccounts(serviceId: $serviceId)
    @rest(
      type: "[GatewayAccount]"
      path: "/internal/services/services/{args.serviceId}/gateway-accounts"
    ) {
    ...GatewayAccount
  }
}

query GetGatewayAccount($id: ID!) {
  gatewayAccount(id: $id)
    @rest(
      type: "GatewayAccount"
      path: "/internal/payments/gateway-accounts/{args.id}"
    ) {
    ...GatewayAccount
  }
}

query GetProducts($gatewayAccountId: ID!) {
  products(gatewayAccountId: $gatewayAccountId)
    @rest(
      type: "[Product]"
      path: "/internal/products/gateway-accounts/{args.gatewayAccountId}/products"
    ) {
    ...Product
  }
}

mutation CreateProduct($gatewayAccountId: ID!, $input: CreateProductInput!) {
  product: createProduct(gatewayAccountId: $gatewayAccountId, input: $input)
    @rest(
      type: "Product"
      path: "/internal/products/gateway-accounts/{args.gatewayAccountId}/products"
      method: "POST"
    ) {
    ...Service
  }
}

query GetPayments($gatewayAccountId: ID!) {
  payments(gatewayAccountId: $gatewayAccountId)
    @rest(
      type: "[Payment]"
      path: "/internal/services/gateway-accounts/{args.gatewayAccountId}/payments"
    ) {
    ...Payment
  }
}

query GetPayment($id: ID!) {
  payment(id: $id)
    @rest(type: "Payment", path: "/internal/payments/payments/{args.id}") {
    ...Payment
  }
}
