# import Product from './products.graphql'
# import Service from './services.graphql'

type CardType {
  id: ID!
  brand: String!
  label: String!
  type: String!
}

enum GatewayAccountPaymentProvider {
  sandbox
  bambora
  stripe
}

enum GatewayAccountType {
  test
  live
}

type SandboxCredentials {
  dummy: String
}

type BamboraCredentials {
  merchant_id: String
  account_number: String
  api_username: String
}

union GatewayAccountCredentials = SandboxCredentials | BamboraCredentials

type GatewayAccount {
  id: ID!
  payment_provider: GatewayAccountPaymentProvider!
  type: GatewayAccountType!
  service_name: String!
  service: Service!
  description: String!
  credentials: GatewayAccountCredentials!
  allow_apple_pay: Boolean!
  allow_google_pay: Boolean!
  allow_zero_amount: Boolean!
  requires_3ds: Boolean!
  products: [Product!]
}

type CardDetails {
  cardholder_name: String!
  card_number: String
  last_digits_card_number: String!
  first_digits_card_number: String!
  expiry_date: String!
  card_brand: String!
}

enum PaymentStatus {
  created
  started
  submitted
  capturable
  success
  declined
  timed_out
  cancelled
  error
}

type Payment {
  id: ID!
  inserted_at: String!
  updated_at: String!
  status: PaymentStatus!
  amount: Int!
  reference: String!
  description: String!
  email: String!
  card_details: CardDetails
  gateway_transaction_id: ID
  gateway_account_id: ID!
  gateway_account: GatewayAccount!
}

enum PaymentEventType {
  payment
  refund
}

type PaymentEvent {
  id: ID!
  inserted_at: String!
  updated_at: String!
  type: PaymentEventType!
  status: PaymentStatus!
}
