fragment GatewayAccount on GatewayAccount {
  id
  type
  payment_provider
  service_name
}

fragment Payment on Payment {
  id
  inserted_at
  updated_at
  status
  amount
  reference
  description
  email
  gateway_account_id
  gateway_account {
    ...GatewayAccount
  }
}

# These mutations hit the same endpoint. This is required because GraphQL does
# not support input union types.
# See https://github.com/graphql/graphql-spec/issues/488

mutation SubmitSandboxPayment(
  $paymentId: ID!
  $input: SubmitSandboxPaymentInput!
) {
  payment: submitSandboxPayment(paymentId: $paymentId, input: $input)
    @rest(
      type: "Payment"
      path: "/internal/payments/payments/{args.paymentId}"
      method: "PATCH"
    ) {
    ...Payment
  }
}

mutation SubmitBamboraPayment(
  $paymentId: ID!
  $input: SubmitBamboraPaymentInput!
) {
  payment: submitBamboraPayment(paymentId: $paymentId, input: $input)
    @rest(
      type: "Payment"
      path: "/internal/payments/payments/{args.paymentId}"
      method: "PATCH"
    ) {
    ...Payment
  }
}

query GetPayment($id: ID!) {
  payment(id: $id)
    @rest(type: "Payment", path: "/internal/payments/payments/{args.id}") {
    gateway_account_id @export(as: "gatewayAccountId")
    ...Payment
    gateway_account
      @rest(
        type: "GatewayAccount"
        path: "/internal/payments/gateway-accounts/{exportVariables.gatewayAccountId}"
      ) {
      ...GatewayAccount
    }
  }
}
